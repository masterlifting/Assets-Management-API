// <auto-generated />
using System;
using IM.Service.Market.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace IM.Service.Market.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20220119051147_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("IM.Service.Company.Data.DataAccess.Entities.Company", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("IM.Service.Company.Data.DataAccess.Entities.CompanySourceType", b =>
                {
                    b.Property<string>("CompanyId")
                        .HasColumnType("character varying(10)");

                    b.Property<byte>("SourceTypeId")
                        .HasColumnType("smallint");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("CompanyId", "SourceTypeId");

                    b.HasIndex("SourceTypeId");

                    b.ToTable("CompanySourceTypes");
                });

            modelBuilder.Entity("IM.Service.Company.Data.DataAccess.Entities.Price", b =>
                {
                    b.Property<string>("CompanyId")
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("Date");

                    b.Property<string>("SourceType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal>("Value")
                        .HasColumnType("numeric(18,4)");

                    b.HasKey("CompanyId", "Date");

                    b.ToTable("Prices");
                });

            modelBuilder.Entity("IM.Service.Company.Data.DataAccess.Entities.Report", b =>
                {
                    b.Property<string>("CompanyId")
                        .HasColumnType("character varying(10)");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.Property<byte>("Quarter")
                        .HasColumnType("smallint");

                    b.Property<decimal?>("Asset")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("CashFlow")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("LongTermDebt")
                        .HasColumnType("numeric(18,4)");

                    b.Property<int>("Multiplier")
                        .HasColumnType("integer");

                    b.Property<decimal?>("Obligation")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("ProfitGross")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("ProfitNet")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("Revenue")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("ShareCapital")
                        .HasColumnType("numeric(18,4)");

                    b.Property<string>("SourceType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal?>("Turnover")
                        .HasColumnType("numeric(18,4)");

                    b.HasKey("CompanyId", "Year", "Quarter");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("IM.Service.Company.Data.DataAccess.Entities.SourceType", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<byte>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("SourceTypes");

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            Description = "For reports from company official site",
                            Name = "official"
                        },
                        new
                        {
                            Id = (byte)2,
                            Description = "For prices from Moscow Exchange",
                            Name = "moex"
                        },
                        new
                        {
                            Id = (byte)3,
                            Description = "For prices from Nasdaq Exchange",
                            Name = "tdameritrade"
                        },
                        new
                        {
                            Id = (byte)4,
                            Description = "For reports from Investing.com",
                            Name = "investing"
                        });
                });

            modelBuilder.Entity("IM.Service.Company.Data.DataAccess.Entities.StockSplit", b =>
                {
                    b.Property<string>("CompanyId")
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("Date");

                    b.Property<string>("SourceType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("Value")
                        .HasColumnType("integer");

                    b.HasKey("CompanyId", "Date");

                    b.ToTable("StockSplits");
                });

            modelBuilder.Entity("IM.Service.Company.Data.DataAccess.Entities.StockVolume", b =>
                {
                    b.Property<string>("CompanyId")
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("Date");

                    b.Property<string>("SourceType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<long>("Value")
                        .HasColumnType("bigint");

                    b.HasKey("CompanyId", "Date");

                    b.ToTable("StockVolumes");
                });

            modelBuilder.Entity("IM.Service.Company.Data.DataAccess.Entities.CompanySourceType", b =>
                {
                    b.HasOne("IM.Service.Company.Data.DataAccess.Entities.Company", "Company")
                        .WithMany("CompanySourceTypes")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IM.Service.Company.Data.DataAccess.Entities.SourceType", "SourceType")
                        .WithMany("CompanySourceTypes")
                        .HasForeignKey("SourceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("SourceType");
                });

            modelBuilder.Entity("IM.Service.Company.Data.DataAccess.Entities.Price", b =>
                {
                    b.HasOne("IM.Service.Company.Data.DataAccess.Entities.Company", "Company")
                        .WithMany("Prices")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("IM.Service.Company.Data.DataAccess.Entities.Report", b =>
                {
                    b.HasOne("IM.Service.Company.Data.DataAccess.Entities.Company", "Company")
                        .WithMany("Reports")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("IM.Service.Company.Data.DataAccess.Entities.StockSplit", b =>
                {
                    b.HasOne("IM.Service.Company.Data.DataAccess.Entities.Company", "Company")
                        .WithMany("StockSplits")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("IM.Service.Company.Data.DataAccess.Entities.StockVolume", b =>
                {
                    b.HasOne("IM.Service.Company.Data.DataAccess.Entities.Company", "Company")
                        .WithMany("StockVolumes")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("IM.Service.Company.Data.DataAccess.Entities.Company", b =>
                {
                    b.Navigation("CompanySourceTypes");

                    b.Navigation("Prices");

                    b.Navigation("Reports");

                    b.Navigation("StockSplits");

                    b.Navigation("StockVolumes");
                });

            modelBuilder.Entity("IM.Service.Company.Data.DataAccess.Entities.SourceType", b =>
                {
                    b.Navigation("CompanySourceTypes");
                });
#pragma warning restore 612, 618
        }
    }
}
