// <auto-generated />
using System;
using IM.Service.Company.Data.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace IM.Service.Company.Data.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseSerialColumns(modelBuilder);

            modelBuilder.Entity("IM.Service.Company.Data.DataAccess.Entities.Company", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<byte>("IndustryId")
                        .HasColumnType("smallint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("IndustryId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("IM.Service.Company.Data.DataAccess.Entities.Industry", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<byte>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<byte>("SectorId")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("SectorId");

                    b.ToTable("Industries");

                    b.HasData(
                        new
                        {
                            Id = (byte)20,
                            Name = "Разные промышленные товары",
                            SectorId = (byte)1
                        },
                        new
                        {
                            Id = (byte)18,
                            Name = "Химическое производство",
                            SectorId = (byte)1
                        },
                        new
                        {
                            Id = (byte)7,
                            Name = "Золото и серебро",
                            SectorId = (byte)1
                        },
                        new
                        {
                            Id = (byte)29,
                            Name = "Металлодобывающая промышленность",
                            SectorId = (byte)1
                        },
                        new
                        {
                            Id = (byte)27,
                            Name = "Нерудная промышленность",
                            SectorId = (byte)1
                        },
                        new
                        {
                            Id = (byte)12,
                            Name = "Строительство-снабжение",
                            SectorId = (byte)2
                        },
                        new
                        {
                            Id = (byte)8,
                            Name = "Аэрокосмическая и оборонная промышленность",
                            SectorId = (byte)2
                        },
                        new
                        {
                            Id = (byte)22,
                            Name = "Различные средства производства",
                            SectorId = (byte)2
                        },
                        new
                        {
                            Id = (byte)14,
                            Name = "Научно-техническое приборостроение",
                            SectorId = (byte)3
                        },
                        new
                        {
                            Id = (byte)11,
                            Name = "Компьютерные услуги",
                            SectorId = (byte)3
                        },
                        new
                        {
                            Id = (byte)21,
                            Name = "Программное обеспечение и программирование",
                            SectorId = (byte)3
                        },
                        new
                        {
                            Id = (byte)19,
                            Name = "Коммуникационное оборудование",
                            SectorId = (byte)3
                        },
                        new
                        {
                            Id = (byte)3,
                            Name = "Полупроводники",
                            SectorId = (byte)3
                        },
                        new
                        {
                            Id = (byte)16,
                            Name = "Электроэнергетика",
                            SectorId = (byte)4
                        },
                        new
                        {
                            Id = (byte)15,
                            Name = "Газоснабжение",
                            SectorId = (byte)4
                        },
                        new
                        {
                            Id = (byte)30,
                            Name = "Нефтегазовая промышленность",
                            SectorId = (byte)5
                        },
                        new
                        {
                            Id = (byte)4,
                            Name = "Интегрированная нефтегазовая промышленность",
                            SectorId = (byte)5
                        },
                        new
                        {
                            Id = (byte)23,
                            Name = "Автомобильная промышленность",
                            SectorId = (byte)6
                        },
                        new
                        {
                            Id = (byte)17,
                            Name = "Региональные банки",
                            SectorId = (byte)7
                        },
                        new
                        {
                            Id = (byte)6,
                            Name = "Потребительские финансовые услуги",
                            SectorId = (byte)7
                        },
                        new
                        {
                            Id = (byte)1,
                            Name = "Пищевая промышленность",
                            SectorId = (byte)8
                        },
                        new
                        {
                            Id = (byte)13,
                            Name = "Напитки",
                            SectorId = (byte)8
                        },
                        new
                        {
                            Id = (byte)5,
                            Name = "Производство и поставки медицинского оборудования",
                            SectorId = (byte)9
                        },
                        new
                        {
                            Id = (byte)10,
                            Name = "Биотехнологии и лекарства",
                            SectorId = (byte)9
                        },
                        new
                        {
                            Id = (byte)25,
                            Name = "Услуги связи",
                            SectorId = (byte)10
                        },
                        new
                        {
                            Id = (byte)26,
                            Name = "Розничная торговля",
                            SectorId = (byte)10
                        },
                        new
                        {
                            Id = (byte)9,
                            Name = "Эфирное и кабельное телевидение",
                            SectorId = (byte)10
                        },
                        new
                        {
                            Id = (byte)24,
                            Name = "Деловые услуги",
                            SectorId = (byte)10
                        },
                        new
                        {
                            Id = (byte)2,
                            Name = "Отдых",
                            SectorId = (byte)10
                        },
                        new
                        {
                            Id = (byte)28,
                            Name = "Воздушные перевозки",
                            SectorId = (byte)11
                        });
                });

            modelBuilder.Entity("IM.Service.Company.Data.DataAccess.Entities.ManyToMany.CompanySource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<string>("CompanyId")
                        .IsRequired()
                        .HasColumnType("character varying(10)");

                    b.Property<byte>("SourceId")
                        .HasColumnType("smallint");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("SourceId");

                    b.ToTable("CompanySources");
                });

            modelBuilder.Entity("IM.Service.Company.Data.DataAccess.Entities.Price", b =>
                {
                    b.Property<string>("CompanyId")
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("Date");

                    b.Property<string>("SourceType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal>("Value")
                        .HasColumnType("numeric(18,4)");

                    b.HasKey("CompanyId", "Date");

                    b.ToTable("Prices");
                });

            modelBuilder.Entity("IM.Service.Company.Data.DataAccess.Entities.Report", b =>
                {
                    b.Property<string>("CompanyId")
                        .HasColumnType("character varying(10)");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.Property<byte>("Quarter")
                        .HasColumnType("smallint");

                    b.Property<decimal?>("Asset")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("CashFlow")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("LongTermDebt")
                        .HasColumnType("numeric(18,4)");

                    b.Property<int>("Multiplier")
                        .HasColumnType("integer");

                    b.Property<decimal?>("Obligation")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("ProfitGross")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("ProfitNet")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("Revenue")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("ShareCapital")
                        .HasColumnType("numeric(18,4)");

                    b.Property<string>("SourceType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal?>("Turnover")
                        .HasColumnType("numeric(18,4)");

                    b.HasKey("CompanyId", "Year", "Quarter");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("IM.Service.Company.Data.DataAccess.Entities.Sector", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<byte>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Sectors");

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            Name = "Сырье"
                        },
                        new
                        {
                            Id = (byte)2,
                            Name = "Средства производства"
                        },
                        new
                        {
                            Id = (byte)3,
                            Name = "Технологии"
                        },
                        new
                        {
                            Id = (byte)4,
                            Name = "Коммунальные услуги"
                        },
                        new
                        {
                            Id = (byte)5,
                            Name = "Энергетика"
                        },
                        new
                        {
                            Id = (byte)6,
                            Name = "Цикличные компании"
                        },
                        new
                        {
                            Id = (byte)7,
                            Name = "Финансы"
                        },
                        new
                        {
                            Id = (byte)8,
                            Name = "Нецикличные компании"
                        },
                        new
                        {
                            Id = (byte)9,
                            Name = "Здравоохранение"
                        },
                        new
                        {
                            Id = (byte)10,
                            Name = "Услуги"
                        },
                        new
                        {
                            Id = (byte)11,
                            Name = "Транспорт"
                        });
                });

            modelBuilder.Entity("IM.Service.Company.Data.DataAccess.Entities.Sources", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<byte>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Sources");

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            Description = "For reports from company official site",
                            Name = "official"
                        },
                        new
                        {
                            Id = (byte)2,
                            Description = "For prices from Moscow Exchange",
                            Name = "moex"
                        },
                        new
                        {
                            Id = (byte)3,
                            Description = "For prices from Nasdaq Exchange",
                            Name = "tdameritrade"
                        },
                        new
                        {
                            Id = (byte)4,
                            Description = "For reports from Investing.com",
                            Name = "investing"
                        });
                });

            modelBuilder.Entity("IM.Service.Company.Data.DataAccess.Entities.StockSplit", b =>
                {
                    b.Property<string>("CompanyId")
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("Date");

                    b.Property<string>("SourceType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("Value")
                        .HasColumnType("integer");

                    b.HasKey("CompanyId", "Date");

                    b.ToTable("StockSplits");
                });

            modelBuilder.Entity("IM.Service.Company.Data.DataAccess.Entities.StockVolume", b =>
                {
                    b.Property<string>("CompanyId")
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("Date");

                    b.Property<string>("SourceType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<long>("Value")
                        .HasColumnType("bigint");

                    b.HasKey("CompanyId", "Date");

                    b.ToTable("StockVolumes");
                });

            modelBuilder.Entity("IM.Service.Company.Data.DataAccess.Entities.Company", b =>
                {
                    b.HasOne("IM.Service.Company.Data.DataAccess.Entities.Industry", "Industry")
                        .WithMany("Companies")
                        .HasForeignKey("IndustryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Industry");
                });

            modelBuilder.Entity("IM.Service.Company.Data.DataAccess.Entities.Industry", b =>
                {
                    b.HasOne("IM.Service.Company.Data.DataAccess.Entities.Sector", "Sector")
                        .WithMany("Industries")
                        .HasForeignKey("SectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sector");
                });

            modelBuilder.Entity("IM.Service.Company.Data.DataAccess.Entities.ManyToMany.CompanySource", b =>
                {
                    b.HasOne("IM.Service.Company.Data.DataAccess.Entities.Company", "Company")
                        .WithMany("CompanySources")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IM.Service.Company.Data.DataAccess.Entities.Sources", "Source")
                        .WithMany("CompanySources")
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Source");
                });

            modelBuilder.Entity("IM.Service.Company.Data.DataAccess.Entities.Price", b =>
                {
                    b.HasOne("IM.Service.Company.Data.DataAccess.Entities.Company", "Company")
                        .WithMany("Prices")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("IM.Service.Company.Data.DataAccess.Entities.Report", b =>
                {
                    b.HasOne("IM.Service.Company.Data.DataAccess.Entities.Company", "Company")
                        .WithMany("Reports")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("IM.Service.Company.Data.DataAccess.Entities.StockSplit", b =>
                {
                    b.HasOne("IM.Service.Company.Data.DataAccess.Entities.Company", "Company")
                        .WithMany("StockSplits")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("IM.Service.Company.Data.DataAccess.Entities.StockVolume", b =>
                {
                    b.HasOne("IM.Service.Company.Data.DataAccess.Entities.Company", "Company")
                        .WithMany("StockVolumes")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("IM.Service.Company.Data.DataAccess.Entities.Company", b =>
                {
                    b.Navigation("CompanySources");

                    b.Navigation("Prices");

                    b.Navigation("Reports");

                    b.Navigation("StockSplits");

                    b.Navigation("StockVolumes");
                });

            modelBuilder.Entity("IM.Service.Company.Data.DataAccess.Entities.Industry", b =>
                {
                    b.Navigation("Companies");
                });

            modelBuilder.Entity("IM.Service.Company.Data.DataAccess.Entities.Sector", b =>
                {
                    b.Navigation("Industries");
                });

            modelBuilder.Entity("IM.Service.Company.Data.DataAccess.Entities.Sources", b =>
                {
                    b.Navigation("CompanySources");
                });
#pragma warning restore 612, 618
        }
    }
}
