// <auto-generated />
using System;
using IM.Service.Company.Reports.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace IM.Service.Company.Reports.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20211009120428_SetSourceValueLength")]
    partial class SetSourceValueLength
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("IM.Service.Company.Reports.DataAccess.Entities.Report", b =>
                {
                    b.Property<string>("TickerName")
                        .HasColumnType("character varying(10)");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.Property<byte>("Quarter")
                        .HasColumnType("smallint");

                    b.Property<decimal?>("Asset")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("CashFlow")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("Dividend")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("LongTermDebt")
                        .HasColumnType("numeric(18,4)");

                    b.Property<int>("Multiplier")
                        .HasColumnType("integer");

                    b.Property<decimal?>("Obligation")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("ProfitGross")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("ProfitNet")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("Revenue")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("ShareCapital")
                        .HasColumnType("numeric(18,4)");

                    b.Property<string>("SourceType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<long>("StockVolume")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("Turnover")
                        .HasColumnType("numeric(18,4)");

                    b.HasKey("TickerName", "Year", "Quarter");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("IM.Service.Company.Reports.DataAccess.Entities.SourceType", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("SourceTypes");

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            Name = "Select report source"
                        },
                        new
                        {
                            Id = (byte)2,
                            Name = "official"
                        },
                        new
                        {
                            Id = (byte)3,
                            Name = "investing"
                        });
                });

            modelBuilder.Entity("IM.Service.Company.Reports.DataAccess.Entities.Ticker", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<byte>("SourceTypeId")
                        .HasColumnType("smallint");

                    b.Property<string>("SourceValue")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.HasKey("Name");

                    b.HasIndex("SourceTypeId");

                    b.ToTable("Tickers");
                });

            modelBuilder.Entity("IM.Service.Company.Reports.DataAccess.Entities.Report", b =>
                {
                    b.HasOne("IM.Service.Company.Reports.DataAccess.Entities.Ticker", "Ticker")
                        .WithMany("Reports")
                        .HasForeignKey("TickerName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ticker");
                });

            modelBuilder.Entity("IM.Service.Company.Reports.DataAccess.Entities.Ticker", b =>
                {
                    b.HasOne("IM.Service.Company.Reports.DataAccess.Entities.SourceType", "SourceType")
                        .WithMany("Tickers")
                        .HasForeignKey("SourceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SourceType");
                });

            modelBuilder.Entity("IM.Service.Company.Reports.DataAccess.Entities.SourceType", b =>
                {
                    b.Navigation("Tickers");
                });

            modelBuilder.Entity("IM.Service.Company.Reports.DataAccess.Entities.Ticker", b =>
                {
                    b.Navigation("Reports");
                });
#pragma warning restore 612, 618
        }
    }
}
