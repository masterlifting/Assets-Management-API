// <auto-generated />
using System;
using IM.Services.Companies.Prices.Api.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace IM.Services.Companies.Prices.Api.Migrations
{
    [DbContext(typeof(PricesContext))]
    [Migration("20210530115339_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "6.0.0-preview.4.21253.1")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("IM.Services.Companies.Prices.Api.Entities.Price", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("TickerName")
                        .HasColumnType("character varying(10)");

                    b.Property<decimal>("Value")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("TickerName");

                    b.ToTable("Prices");
                });

            modelBuilder.Entity("IM.Services.Companies.Prices.Api.Entities.PriceSourceType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("PriceSourceTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "moex"
                        },
                        new
                        {
                            Id = 2,
                            Name = "tdameridrade"
                        });
                });

            modelBuilder.Entity("IM.Services.Companies.Prices.Api.Entities.Ticker", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<int>("PriceSourceTypeId")
                        .HasColumnType("integer");

                    b.HasKey("Name");

                    b.HasIndex("PriceSourceTypeId");

                    b.ToTable("Tickers");
                });

            modelBuilder.Entity("IM.Services.Companies.Prices.Api.Entities.Price", b =>
                {
                    b.HasOne("IM.Services.Companies.Prices.Api.Entities.Ticker", "Ticker")
                        .WithMany("Prices")
                        .HasForeignKey("TickerName");

                    b.Navigation("Ticker");
                });

            modelBuilder.Entity("IM.Services.Companies.Prices.Api.Entities.Ticker", b =>
                {
                    b.HasOne("IM.Services.Companies.Prices.Api.Entities.PriceSourceType", "SourceType")
                        .WithMany("Tickers")
                        .HasForeignKey("PriceSourceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SourceType");
                });

            modelBuilder.Entity("IM.Services.Companies.Prices.Api.Entities.PriceSourceType", b =>
                {
                    b.Navigation("Tickers");
                });

            modelBuilder.Entity("IM.Services.Companies.Prices.Api.Entities.Ticker", b =>
                {
                    b.Navigation("Prices");
                });
#pragma warning restore 612, 618
        }
    }
}
