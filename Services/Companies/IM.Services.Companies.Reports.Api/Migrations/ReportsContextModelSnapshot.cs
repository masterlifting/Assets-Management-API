// <auto-generated />
using System;
using IM.Services.Companies.Reports.Api.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace IM.Services.Companies.Reports.Api.Migrations
{
    [DbContext(typeof(ReportsContext))]
    partial class ReportsContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "6.0.0-preview.4.21253.1")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("IM.Services.Companies.Reports.Api.Entities.Report", b =>
                {
                    b.Property<int>("ReportSourceId")
                        .HasColumnType("integer");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.Property<byte>("Quarter")
                        .HasColumnType("smallint");

                    b.Property<decimal?>("Asset")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("CashFlow")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("Dividend")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("LongTermDebt")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("Obligation")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("ProfitGross")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("ProfitNet")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("Revenue")
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal?>("ShareCapital")
                        .HasColumnType("numeric(18,4)");

                    b.Property<long>("StockVolume")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("Turnover")
                        .HasColumnType("numeric(18,4)");

                    b.HasKey("ReportSourceId", "Year", "Quarter");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("IM.Services.Companies.Reports.Api.Entities.ReportSource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<byte>("ReportSourceTypeId")
                        .HasColumnType("smallint");

                    b.Property<string>("TickerName")
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.HasKey("Id");

                    b.HasIndex("IsActive");

                    b.HasIndex("ReportSourceTypeId");

                    b.HasIndex("TickerName");

                    b.ToTable("ReportSources");
                });

            modelBuilder.Entity("IM.Services.Companies.Reports.Api.Entities.ReportSourceType", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("smallint");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("ReportSourceTypes");

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            Name = "official"
                        },
                        new
                        {
                            Id = (byte)2,
                            Name = "investing"
                        });
                });

            modelBuilder.Entity("IM.Services.Companies.Reports.Api.Entities.Ticker", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.HasKey("Name");

                    b.ToTable("Tickers");
                });

            modelBuilder.Entity("IM.Services.Companies.Reports.Api.Entities.Report", b =>
                {
                    b.HasOne("IM.Services.Companies.Reports.Api.Entities.ReportSource", "ReportSource")
                        .WithMany("Reports")
                        .HasForeignKey("ReportSourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReportSource");
                });

            modelBuilder.Entity("IM.Services.Companies.Reports.Api.Entities.ReportSource", b =>
                {
                    b.HasOne("IM.Services.Companies.Reports.Api.Entities.ReportSourceType", "ReportSourceType")
                        .WithMany()
                        .HasForeignKey("ReportSourceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IM.Services.Companies.Reports.Api.Entities.Ticker", "Ticker")
                        .WithMany("ReportSources")
                        .HasForeignKey("TickerName");

                    b.Navigation("ReportSourceType");

                    b.Navigation("Ticker");
                });

            modelBuilder.Entity("IM.Services.Companies.Reports.Api.Entities.ReportSource", b =>
                {
                    b.Navigation("Reports");
                });

            modelBuilder.Entity("IM.Services.Companies.Reports.Api.Entities.Ticker", b =>
                {
                    b.Navigation("ReportSources");
                });
#pragma warning restore 612, 618
        }
    }
}
